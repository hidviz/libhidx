syntax = "proto2";
package libhidx.buffer;

message Init {
    message Request {
    }

    message Response {
        required int32 retValue = 1;
        required uint64 ctx = 2;
    }
}

message Exit {
    message Request {
        required uint64 ctx = 1;
    }

    message Response {
    }
}

message GetDeviceList {
    message Request {
        required uint64 ctx = 1;
    }

    message Response {
        required int64 retValue = 1;
        repeated uint64 deviceList = 2;
        optional uint64 listHandle = 3;
    }
}

message FreeDeviceList {
    message Request {
        required uint64 listHandle = 1;
        required int32 unrefDevices = 2;
    }

    message Response {

    }
}

message GetDeviceDescriptor {
    message Request {
        required int64 device = 1;
    }

    message Response {
        required int32 retValue = 1;
        optional DeviceDescriptor deviceDescriptor = 2;
    }
}


message DeviceDescriptor {
    required uint32 length = 1;
    required uint32 descriptorType = 2;
    required uint32 bcdUSB = 3;
    required uint32 deviceClass = 4;
    required uint32 deviceSubClass = 5;
    required uint32 deviceProtocol = 6;
    required uint32 maxPacketSize = 7;
    required uint32 vendor = 8;
    required uint32 product = 9;
    required uint32 bcdDevice = 10;
    required uint32 indexManufacturer = 11;
    required uint32 indexProduct = 12;
    required uint32 indexSerialNumber = 13;
    required uint32 numConfiguration = 14;
}

message GetActiveConfigDescriptor {
    message Request {
        required int64 device = 1;
    }

    message Response {
        required int32 retValue = 1;
        optional ConfigDescriptor configDescriptor = 2;
    }
}

message ConfigDescriptor {
    required uint32 length = 1;
    required uint32 descriptorType = 2;
    required uint32 totalLength = 3;
    required uint32 numInterfaces = 4;
    required uint32 configurationValue = 5;
    required uint32 indexConfiguration = 6;
    required uint32 attributes = 7;
    required uint32 maxPower = 8;
    repeated Interface interface = 9;
    required bytes extra = 10;
    required int32 extraLength = 11;
}

message Interface {
    repeated InterfaceDescriptor altsetting = 1;
    required int32 numAltsetting = 2;
}

message InterfaceDescriptor {
    required uint32 length = 1;
    required uint32 descriptorType = 2;
    required uint32 interfaceNumber = 3;
    required uint32 alternateSetting = 4;
    required uint32 numEndpoints = 5;
    required uint32 interfaceClass = 6;
    required uint32 interfaceSubClass = 7;
    required uint32 interfaceProtocol = 8;
    required uint32 indexInterface = 9;
    repeated EndpointDescriptor endpoint = 10;
    required bytes extra = 11;
    required int32 extraLength = 12;
}

message EndpointDescriptor {
    required uint32 length = 1;
    required uint32 descriptorType = 2;
    required uint32 endpointAddress = 3;
    required uint32 attributes = 4;
    required uint32 maxPacketSize = 5;
    required uint32 interval = 6;
    required uint32 refresh = 7;
    required uint32 synchAddress = 8;
    required bytes extra = 9;
    required int32 extraLength = 10;
}

message Open {
    message Request {
        required uint64 device = 1;
    }

    message Response {
        required int32 retvalue = 1;
        optional uint64 handle = 2;
    }
}

message Close {
    message Request {
        required uint64 handle = 1;
    }

    message Response {

    }
}

message KernelDriverActive {
    message Request {
        required uint64 handle = 1;
        required int32 interfaceNumber = 2;
    }

    message Response {
        required int32 retvalue = 1;
    }
}

message DetachKernelDriver {
    message Request {
        required uint64 handle = 1;
        required int32 interfaceNumber = 2;
    }

    message Response {
        required int32 retvalue = 1;
    }
}

message AttachKernelDriver {
    message Request {
        required uint64 handle = 1;
        required int32 interfaceNumber = 2;
    }

    message Response {
        required int32 retvalue = 1;
    }
}

message ClaimInterface {
    message Request {
        required uint64 handle = 1;
        required int32 interfaceNumber = 2;
    }

    message Response {
        required int32 retvalue = 1;
    }
}


message ReleaseInterface {
    message Request {
        required uint64 handle = 1;
        required int32 interfaceNumber = 2;
    }

    message Response {
        required int32 retvalue = 1;
    }
}

message GetStringDescriptorAscii {
    message Request {
        required uint64 handle = 1;
        required int32 descIndex = 2;
    }

    message Response {
        required int32 retvalue = 1;
        optional string data = 2;
    }
}

message ControlOutTransfer {
    message Request {
        required uint64 handle = 1;
        required uint32 requestType = 2;
        required uint32 request = 3;
        required uint32 value = 4;
        required uint32 index = 5;
        required bytes data = 6;
        required uint32 timeout = 7;
    }

    message Response {
        required int32 retvalue = 1;
    }
}

message ControlInTransfer {
    message Request {
        required uint64 handle = 1;
        required uint32 requestType = 2;
        required uint32 request = 3;
        required uint32 value = 4;
        required uint32 index = 5;
        required uint32 length = 6;
        required uint32 timeout = 7;
    }

    message Response {
        required int32 retvalue = 1;
        optional bytes data = 2;
    }
}

message InterruptOutTransfer {
    message Request {
        required uint64 handle = 1;
        required uint32 endpoint = 2;
        required bytes data = 3;
        required uint32 timeout = 4;
    }

    message Response {
        required int32 retvalue = 1;
        required int32 transferred = 2;
    }
}

message InterruptInTransfer {
    message Request {
        required uint64 handle = 1;
        required uint32 endpoint = 2;
        required uint32 length = 3;
        required uint32 timeout = 5;
    }
    message Response {
        required int32 retvalue = 1;
        required int32 transferred = 2;
        required bytes data = 3;
    }
}
